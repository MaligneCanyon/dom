document.addEventListener('DOMContentLoaded', () => { // step1
  const textFieldElem = document.querySelector('.text-field'); // step1
  const contentElem = document.querySelector('.content'); // step5
  let cursorId; // step3

  // textFieldElem.addEventListener('click', event => {
  textFieldElem.addEventListener('click', function(event) {  // step1; fn expr allows us to ref 'this'
    event.stopPropagation(); // step2

    this.classList.add('focused'); // step1
    console.log('focused === ', this.classList.contains('focused'));

    // step3
    // if (!cursorId) { // prevent multiple cursors // step7
    //   cursorId = setInterval(() => {
    //     this.classList.toggle('cursor'); // 'this' is determined lexically in an arrow fn
    //   }, 500);
    // }
    // console.log(cursorId);

    cursorId = cursorId || setInterval(() => { // step7; from the Solution
      this.classList.toggle('cursor');
    }, 500);
  });

  // step2
  document.addEventListener('click', event => {
    textFieldElem.classList.remove('focused');
    console.log('focused === ', textFieldElem.classList.contains('focused'));
    if (cursorId) { // step7
      clearInterval(cursorId); // step4
      cursorId = 0;
    }
    textFieldElem.classList.remove('cursor'); // step4
  });

  // Note: 'keypress' event is deprecated
  // Note: keyboard events are only generated by <inputs>, <textarea> and
  //   anything with the contentEditable attribute or with tabindex="-1"
  // console.log(textFieldElem.hasAttribute('contentEditable')); //=> false
  // textFieldElem.addEventListener('keydown', function(event) { // step5 // doesn't work
  document.addEventListener('keydown', function(event) { // step5
    if (textFieldElem.classList.contains('focused')) {
      console.log(event.key, event.code);
      // contentElem.textContent += event.key;

      // step6
      if (event.key === 'Backspace')
        contentElem.textContent = contentElem.textContent.slice(0, -1);
      else if (event.key.length === 1) // don't show the alt, ctrl, shift, etc. keys
        contentElem.textContent += event.key;
    }
  });
});
